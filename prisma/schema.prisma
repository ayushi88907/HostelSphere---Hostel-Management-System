// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  firstName        String
  lastName         String
  email            String
  password         String
  studentId        String
  courseName       String
  otherCourseName  String?
  registrationDate DateTime          @default(now())
  profile          Profile?
  complaint        Complaint[]
  fees             Fees[]
  role             Role              @default(Student)
  isVerified       Verified          @default(Pending)
  ComplaintUpvote  ComplaintUpvote[]
  Outing           Outing[]
  Attendance       Attendance[]
}

model Admin {
  id               String                    @id @default(uuid())
  firstName        String
  lastName         String
  email            String
  password         String
  staffId          String
  department       String
  reasonForAccess  String
  role             Role                      @default(Warden)
  profile          Profile?
  notice           Notice[]
  hostel           Hostel[]
  Complaint        Complaint[]
  isVerified       WardenVerificationStatus? @default(Approved)
  registrationDate DateTime                  @default(now())
  Outing           Outing[]
}

enum WardenVerificationStatus {
  Approved
  Rejected
}

model Profile {
  id             String  @id @default(uuid())
  contact        String?
  profilePicture String?
  //only students can have room no
  roomNo         String? // 
  //Only student Can have hostel name
  hostelName     String?
  //hostel Care only warden gets hostel care
  hostelCare     String?
  department     String?
  admin          Admin?  @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId        String? @unique
  user           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String? @unique
}

model Complaint {
  id              String            @id @default(uuid())
  type            ComplaintType     @default(low)
  title           String
  description     String
  status          ComplaintStatus   @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  images          String[]          @default([])
  raisedBy        User              @relation(fields: [raisedById], references: [id], onDelete: Cascade)
  raisedById      String
  upvotes         ComplaintUpvote[]
  resolvedBy      Admin?            @relation(fields: [resolvedById], references: [id], onDelete: Cascade)
  resolvedById    String?
  resolvedMessage String?
}

model ComplaintUpvote {
  id          String    @id @default(uuid())
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())

  @@unique([complaintId, userId])
}

model Notice {
  id          String   @id @default(uuid())
  title       String
  description String   @db.VarChar(300)
  noticeDate  DateTime @default(now())
  adminId     String
  admin       Admin    @relation(fields: [adminId], references: [id])
}

model Otp {
  id        String   @id @default(cuid())
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  email     String
}

model Hostel {
  id            Int      @id @default(autoincrement())
  hostelName    String[] @default([])
  roomCount     Int
  roomOccoupied Int?     @default(0)
  admin         Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId       String
  managedBy     String?
}

// room          Room[]?

model Room {
  id       String @id @default(uuid())
  roomNo   Int
  hostelId Int
  // hostel   Hostel @relation(fields: [hostelId], references: [id])
}

model Fees {
  id            String   @id @default(uuid())
  paymentId     String   @unique
  paymentSlip   String
  paymentAmount Int
  paymentDate   DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Outing {
  id                String    @id @default(cuid())
  outingDate        DateTime
  returnDate        DateTime
  checkOutTime      DateTime?
  leavingTime       DateTime?
  outingPurpose     String    @db.VarChar(300)
  approvalStatus    Verified  @default(Pending)
  createdAt         DateTime  @default(now())
  securitySignature String?
  user              User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String    
  Admin             Admin?     @relation(fields: [approverById], references: [id], onDelete: Cascade)
  approverById      String?
  approvedByParents Verified  @default(Pending)
  parentApprovalToken String? @unique
  tokenExpiry         DateTime?
  parentsEmail      String    
  parentsContact    String    
}

model Attendance {
  id     String           @id @default(uuid())
  date   DateTime
  status AttendanceStatus @default(Present)
  userId String
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  resolved
  pending
  inProgress
}

enum AttendanceStatus {
  Present
  Absent
  Leave
}

enum ComplaintType {
  low
  medium
  high
}

enum Role {
  Warden
  Admin
  Student
}

enum Verified {
  Pending
  Rejected
  Approved
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
}
